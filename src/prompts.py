
def photo_description_pt(timestamp=None, location=None):
   prompt = f"""
   已知信息：
   {f'拍摄时间：{timestamp}' if timestamp else '拍摄时间未知'}
   {f'拍摄地点：{location}' if location else '拍摄地点未知'}

   请从以下角度描述照片：
   1. 照片类型：[判断是自拍/风景/美食/合照/截图等]
   2. 画面内容：
      - 主要内容是什么
      - 有哪些人物（如果有），他们在做什么
      - 场景的关键特征（环境、光线、构图等）
   3. 情感和记忆：
      - 这个场景/时刻传达的心情或氛围
      - 相关的生活背景或故事（如果能推断出）
   4. 检索标签：[根据内容生成3-5个标签，包括但不限于：
      - 照片类型标签（如#自拍 #美食 #风景）
      - 场景标签（如#室内 #户外 #餐厅）
      - 活动标签（如#旅行 #聚会 #日常）
      - 情感标签（如#开心 #怀旧 #温馨）]
   
   请按照以下严格的JSON格式描述这张照片。确保输出可以被直接解析为JSON：
   {{
      "description": "这里是照片的详细描述，包含场景、人物、活动等信息。描述应该生动自然，富有感情",
      "tags": ["标签1", "标签2", "标签3"],
      "photo_type": "自拍/风景/美食/合照/截图 等分类",
      "scene_type": "室内/户外/餐厅 等场景类型",
      "emotion": "照片传达的主要情感"
   }}

   要求：
   1. description字段：用自然的语言描述照片，包含可见的关键内容和情感记忆
   2. tags字段：生成3-5个便于检索的标签，不包含#符号
   3. 如果拍摄时间和地点对描述有帮助，可以加入到描述中。但是不需要给出详细的时间和地点信息，可以用午后，早晨等描述
   4. 严格遵守JSON格式，确保输出可以被正确解析
   """
   return prompt

def address_rewrite_pt():
   return f"""
   请把给出的英文地址翻译为完整的连贯的中文地址。
   涉及到的州名请不要间简写，如CA请写成加利福尼亚州而不是加州。
   直接回复中文地址即可。
   """

def multimodal_prompt(photo=False):
   text_prompt = """你是一个查询解析助手。你的任务是将用户的自然语言查询解析为结构化的搜索参数，方便进行用户相册的检索。

   输入格式: 用户的自然语言查询
   输出格式: JSON格式的查询参数，包含以下可能的字段：
   {
      "description": str,            # 描述文本
      "tags": list[str],            # 相关标签
      "time": {                     # 时间相关
         "latest": bool,           # 是否查找最近的
         "range": {                # 时间范围
               "gte": str,           # 开始时间
               "lte": str            # 结束时间
         }
      },
      "location": str,              # 地点
      "size": int,                  # 返回结果数量
      "location_must": bool         # 地点是否必须匹配
   }

   注意:
   1. 只返回与查询相关的字段
   2. 时间解析要考虑：
      - "上次"、"最近"等表示latest为true
      - "去年"、"上个月"等需要转换为具体的时间范围
   3. 情感词要映射到预设的情感类型
   4. 标签要从描述中提取关键词

   示例:
   输入: "上次去北京玩是什么时候"
   输出: {
      "description": "玩",
      "location": "北京",
      "time": {"latest": True},
      "size": 1
   }

   输入: "2023年春节和家人的合影"
   输出:
   {
      "description": "春节家人合影",
      "tags": ["春节", "家人", "合影"],
      "time": {
            "range": {
               "gte": "2023-01-21",
               "lte": "2023-01-27"
            }
      },
      "size": 20,
   }
   """

   photo_prompt = """你是一个多模态查询解析助手。你的任务是:
   1. 首先理解输入图片的内容
   2. 生成对图片的详细描述，包括主要内容、人物、环境等信息
   2. 将用户的查询（包含对图片的引用）解析为结构化的搜索参数，方便进行用户相册的检索

   分析步骤:
   1. 图片分析:
      - 主要内容：场景、主体、活动类型
      - 人物：数量、互动、表情
      - 环境：室内/室外、时间、天气
      - 显著特征：颜色、构图、风格
   
   2. 查询解析:
      - 结合图片内容和用户问题
      - 提取搜索相关的关键信息
      - 生成结构化参数

   输入格式: 用户的自然语言查询
   输出格式: JSON格式的查询参数，包含以下可能的字段：
   {
      "description": str,           # 描述文本
      "tags": list[str],            # 相关标签
      "time": {                     # 时间相关
         "latest": bool,           # 是否查找最近的
         "range": {                # 时间范围
               "gte": str,           # 开始时间
               "lte": str            # 结束时间
         }
      },
      "location": str,              # 地点
      "size": int,                  # 返回结果数量
      "location_must": bool         # 地点是否必须匹配
      "input_photo_description": str # 输入图片的详细描述
   }

   注意:
   1. 只返回与查询相关的字段
   2. 时间解析要考虑：
      - "上次"、"最近"等表示latest为true
      - "去年"、"上个月"等需要转换为具体的时间范围
   3. 情感词要映射到预设的情感类型
   4. 标签要从描述中提取关键词

   示例:
   输入: [图片：一群年轻人在餐厅吃火锅...] "找找看上次和他们一起吃火锅是什么时候"
   输出:
   {
      "description": "火锅聚餐",
      "tags": ["火锅", "聚餐", "朋友", "餐厅"],
      "time": {
            "latest": True,
      },
      "size": 100,
      "input_photo_description": "一群年轻人在餐厅吃火锅..."
   }

   输入: [图片：海边夕阳照片...] "上次去这个海滩是什么时候？"
   输出:
   {
      "description": "海滩夕阳",
      "tags": ["海滩", "夕阳", "海边", "自然风光"],
      "time": {
         "latest": True,
      },
      "size": 100,
      "input_photo_description": "海边夕阳照片..."
   }
   """
   return photo_prompt if photo else text_prompt

def generate_pt(curr_time="2025-1-20"):
   prompt = """你是一个智能照片问答助手。你的任务是基于照片信息来回答用户的问题。

   在用户的query中会提供搜索的结果，包含相关照片的数量，和有限数量的照片详情。你需要根据这些信息回答用户的问题。

   请注意：
   1. 回答要基于提供的照片信息，不要编造或猜测未提供的信息
   2. 时间相关问题：
      - 涉及"多久之前"，基于当前时间（{curr_time}）计算
      - 使用自然的方式表达时间
   3. 回答时要综合考虑所有展示的照片信息
   4. 数量相关问题：
      - 要提到总共找到了多少张相关照片
      - 说明当前展示了哪些具体例子
   5. 使用自然、友好的语气
   6. 如果问题超出了提供的信息范围，要诚实地说明
   7. 如果检索到的图片信息不注意回答问题，可以回答未检索到信息。
   8. 回答的时候完全不需要提到你的信息是来自外部检索。你可以完全把这些获取的信息当作你自己的知识。
   """
   return prompt